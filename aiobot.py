from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.utils.markdown import hbold, hstrikethrough
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import types
from aiogram.types import InputMediaPhoto
from configure_bot import TOKEN
import sql, tg_sql, ast, logging, json, os, asyncio
from pprint import pprint
from main import initialize
import requests


bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
headers = {"Content-Type": "application/json"}


class SendPosts(StatesGroup):
    start = State()
    sender = State()
    wait_state = State()


def schedule_post(data, message: types.Message):
    result = requests.post(
        # url="https://inlinegptbot.unitedblack.repl.co",
        url="http://127.0.0.1:80",
        data=json.dumps(data),
        headers=headers,
    )

    return result.status_code


def request_delayed_posts():
    data = {"get_delayed_posts": "get_delayed_posts"}
    result = requests.post(
        # url="https://inlinegptbot.unitedblack.repl.co",
        url="http://127.0.0.1:80",
        data=json.dumps(data),
        headers=headers,
    )
    return result.text


def request_change_time():
    ...


def request_delete_delayed():
    ...


def append_data_to_db(wb_id, status):
    post_exist = tg_sql.is_post_in_db(wb_id)
    if post_exist:
        tg_sql.set_post_status(wb_id=wb_id, status=status)
    elif post_exist == False:
        tg_sql.add_post(wb_id=wb_id, status=status)


def get_second_kb() -> types.ReplyKeyboardMarkup:
    second_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    second_kb.add(
        types.KeyboardButton("–ó–∞–ø–æ—Å—Ç–∏—Ç—å"),
        types.KeyboardButton("–°–∫–∏–ø"),
        types.KeyboardButton("–ù–∞–∑–∞–¥"),
    )
    return second_kb


def get_main_kb() -> types.ReplyKeyboardMarkup:
    main_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    main_kb.add(
        types.KeyboardButton("–õ–∏—Å—Ç–∞—Ç—å –ø–æ—Å—Ç—ã"),
        types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–∫"),
        types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ª–æ–∂–∫–∏"),
        types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∏–∑ –æ—Ç–ª–æ–∂–∫–∏"),
    )
    return main_kb


def wbparse():
    all_products = sql.get_all_products()
    tg_posts: list = tg_sql.get_all_posts()

    # wb_url = [product["url"] for product in all_products]
    filtered_products = [
        product for product in all_products if product["url"] not in tg_posts
    ]

    return filtered_products


def format_post(item):
    name = item.get("name")
    discount_price = item.get("discount_price")
    price = item.get("price")
    star_rating = item.get("star_rating")
    composition = item.get("composition")
    color = item.get("color")
    url = item.get("url")

    post = f"üéÅ {hbold(name)}" if name else ""
    post += (
        f"\nüíµ–¶–µ–Ω–∞: {hstrikethrough(price)}‚ÇΩ {hbold(discount_price)}‚ÇΩ"
        if price and discount_price
        else ""
    )
    post += f"\nüåü–†–µ–π—Ç–∏–Ω–≥: {hbold(star_rating)}" if star_rating else ""
    post += f"\nüî¨–°–æ—Å—Ç–∞–≤: {hbold(composition)}" if composition else ""
    post += f"\nüåà–¶–≤–µ—Ç: {hbold(color)}" if color else ""
    post += f"\nüîó–ö—É–ø–∏—Ç—å: {url}" if url else ""

    return post


def prepare_posts():
    try:
        posts_list: list = wbparse()
    except:
        return False
    for item in posts_list:
        posts_list.pop(0)
        url = item.get("url")
        wb_id = item.get("wb_id")
        is_in_db = tg_sql.is_post_in_db(url)
        post_status = tg_sql.get_post_status(url)
        if is_in_db and post_status in ["Liked", "Disliked"]:
            continue
        post, pic_url = format_post(item), item.get("pic_url")
        if len(pic_url) >= 80:
            pic_url = ast.literal_eval(pic_url)
        return post, pic_url, url


async def poster():
    ...


@dp.message_handler(state=SendPosts.sender)
async def sender(message: types.Message):
    global post_url, pic_url, post_text
    try:
        post_text, pic_url, post_url = prepare_posts()
    except TypeError as e:
        await bot.send_message(message.chat.id, "–ü–æ—Å—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
        return
    except ValueError:
        post_text, pic_url, post_url = prepare_posts()
    await SendPosts.wait_state.set()
    global pictures
    pictures = [InputMediaPhoto(media=pic, parse_mode="HTML") for pic in pic_url]
    pictures[0].caption = post_text
    await bot.send_media_group(chat_id=message.chat.id, media=pictures)
    return


@dp.message_handler(regexp="^[–ó–∑]–∞–ø–æ—Å—Ç–∏—Ç—å|[–°—Å]–∫–∏–ø$", state=SendPosts.wait_state)
async def post_or_skip(message: types.Message):
    user_message: str = message.text.lower()
    await SendPosts.sender.set()
    if user_message == "–∑–∞–ø–æ—Å—Ç–∏—Ç—å":
        delay_data = {"post_text": post_text, "post_pic": pic_url}
        status = schedule_post(delay_data, message)

        if status != 200:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –æ—Ç–ª–æ–∂–∫–æ–π –ø–æ—Å—Ç–∞")
        else:
            append_data_to_db(post_url, "Liked")
            await sender(message=message)

    elif user_message == "—Å–∫–∏–ø":
        append_data_to_db(post_url, "Disliked")
        await sender(message=message)


@dp.message_handler(commands=["clear"], state="*")
async def clear_tg_db(message: types.Message):
    try:
        tg_sql.close_connection()
        os.remove(tg_sql.db_file)
        await message.reply("–ë–î —Å —Ç–≥ –æ—á–∏—â–µ–Ω–∞")
        tg_sql.create_or_connect_database()
    except FileNotFoundError:
        await message.reply("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª")
        return
    except PermissionError:
        print("–ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –ë–î!")
        await message.reply("–ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –ë–î!")


@dp.message_handler(commands=["clear_wb"], state="*")
async def clear_wb_db(message: types.Message):
    try:
        sql.close_connection()
        os.remove(sql.db_file)
        await message.reply("–ë–î —Å –≤–± –æ—á–∏—â–µ–Ω–∞")
        sql.create_or_connect_database()
    except FileNotFoundError:
        await message.reply("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª")
        return
    except PermissionError as e:
        print(e)
        print("–ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –ë–î!")
        await message.reply("–ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –ë–î!")


@dp.message_handler(commands=["parse"], state="*")
async def call_parser(message: types.Message):
    await bot.send_message(message.chat.id, text="–í—ã–∑—ã–≤–∞—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç")
    # send gif
    await initialize()
    await bot.send_message(message.chat.id, text="–°–¥–µ–ª–∞–Ω–æ")


@dp.message_handler(commands=["delayed"], state="*")
async def show_delayed_posts(message: types.Message):
    ...


@dp.message_handler(commands=["exit"], state="*")
async def leave_bot(message: types.Message):
    await message.reply("–ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É")
    exit()


@dp.message_handler(regexp="^–ù–∞–∑–∞–¥$", state="*")
async def main_menu(message: types.Message):
    # await SendPosts.start.set()
    await bot.send_message(
        message.chat.id, text="–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=get_main_kb()
    )


@dp.message_handler(regexp="^–õ–∏—Å—Ç–∞—Ç—å –ø–æ—Å—Ç—ã$", state="*")
async def select_posts(message: types.Message):
    # await SendPosts.sender.set()
    await message.reply("–í—ã—Å—ã–ª–∞—é –ø–æ—Å—Ç—ã", reply_markup=get_second_kb())
    await sender(message=message)


@dp.message_handler(regexp="^–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–∫$", state="*")
async def get_delayed_posts(message: types.Message):
    delayed_post = json.loads(request_delayed_posts())["delayed_posts"]
    for delayed in delayed_post:
        jobname = delayed["jobname"]
        jobtime = delayed["jobtime"]
        jobid = delayed["job_id"]
        msg = f"{jobname}\n{jobtime}\n<code>{jobid}</code>"
        await bot.send_message(message.chat.id, text=msg, parse_mode='HTML')
        await asyncio.sleep(1)

# –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–∫
# –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–µ –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–≤–æ–¥–∏—Ç—å "–∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ª–æ–∂–∫–∏" –∏ "—É–¥–∞–ª–∏—Ç—å" –∏ "–Ω–∞–∑–∞–¥"
# –∞ –µ—â–µ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –æ—Ç–ª–æ–∂–∫–∞ –≤—ã–≤–æ–¥–∏–ª–∞—Å—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
# {'delayed_posts': [{'job_id': 'af14896b133b4f80bb37817eb938a652', 'jobname': '–ù–∞–±–æ—Ä —è—Ä–∫–∏—Ö –¥–ª–∏–Ω–Ω—ã—Ö –Ω–æ—Å–∫–æ–≤ 5 –ø–∞—Ä', 'jobtime': '31-10 03:00'}, {'job_id': 'ad1d0cd0991141cc9e6c57836a5c27d3', 'jobname': '–ù–æ—Å–∫–∏ —Ç–µ–ø–ª—ã–µ –Ω–∞–±–æ—Ä –º–∞—Ö—Ä–æ–≤—ã–µ –¢–µ—Ä–º–æ–Ω–æ—Å–∫–∏', 'jobtime': '31-10 04:00'}, {'job_id': '9c10c', 'jobname': '–ù–∞–±–æ—Ä —è—Ä–∫–∏—Ö –Ω–æ—Å–∫–æ–≤ 10 –ø–∞—Ä', 'jobtime': '31-10 06:00'}, {'job_id': '6902cb11cf464b858cba8d44a77fa414', 'jobname': '–¢–æ–ø —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –Ω–∞ –±—Ä–µ—Ç–µ–ª—è—Ö', 'jobtime': '31-10 07:00'}, {'job_id': '34518811df46475b815d4b9441e8956d', 'jobname': '–ü—É—Ö–æ–≤–∏–∫ –∑–∏–º–Ω–∏–π –¥–ª–∏–Ω–Ω—ã–π —Å –∫–∞–ø—é—à–æ–Ω–æ–º', 'jobtime': '31-10 08:00'}, {'job_id': '8f84cc27275a4530b8694bb9d9a5b1dd', 'jobname': '–ü–∏–¥–∂–∞–∫ —É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–µ–ø–ª—ã–π  –±–ª–µ–π–∑–µ—Ä  –±–∞–∑–æ–≤—ã–π', 'jobtime': '31-10 09:00'}, {'job_id': '009a6457596447298396293050cc54ad', 'jobname': '–î–∂–∏–Ω—Å—ã –∫–ª–µ—à —Ç—Ä—É–±—ã', 'jobtime': '31-10 10:00'}, {'job_id': 'a129d7ac33e04d13be928598404b1863', 'jobname': '–ö–æ—Å—Ç—é–º –¥–æ–º–∞—à–Ω–∏–π —Å –±—Ä—é–∫–∞–º–∏ –∏ —Ç–æ–ø–æ–º', 'jobtime': '31-10 11:00'}, {'job_id': '3d47003029af4b8ea2f1fa1308e2ade4', 'jobname': '–°—É–º–∫–∞ –î–æ—Ä–æ–∂–Ω–∞—è –†—É—á–Ω–∞—è –∫–ª–∞–¥—å –î–ª—è —Ñ–∏—Ç–Ω–µ—Å–∞ –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –®–æ–ø–ø–µ—Ä', 'jobtime': '31-10 12:00'}, {'job_id': 'ccc1a7e10fcc429eaca125e8ad9feafb', 'jobname': '–¢–∞–ø–æ—á–∫–∏ –¥–æ–º–∞—à–Ω–∏–µ –º–µ—Ö–æ–≤—ã–µ', 'jobtime': '31-10 13:00'}]}


@dp.message_handler(commands=["start"], state="*")
async def start_point(message: types.Message):
    wbparse()
    await main_menu(message)
    # await sender(message=message)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
